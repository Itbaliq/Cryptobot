import sqlite3
import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import threading
import requests
from datetime import datetime
from pytz import timezone

TEST_TIME=86400
TOKEN=''

admin_id=[514503717]
lock = threading .Lock()
conn = sqlite3.connect('db/database.db', check_same_thread=False)
cursor = conn.cursor()
conn_prc = sqlite3.connect('db/process.db', check_same_thread=False)
cursor_prc = conn_prc.cursor()
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    name = State()

button_back_to_main_menu = types.InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='main_menu')
button_back_to_main_menu2 = types.InlineKeyboardButton('üîô Menu', callback_data='back_menu')
keyboard_back=types.InlineKeyboardMarkup().add(button_back_to_main_menu2)
button_test = types.InlineKeyboardButton('Test', callback_data='test')
async def TakeMenuId(call):
    menu=conn.execute("SELECT * FROM test WHERE user_id='" + str(call.from_user.id) + "'")
    menu=menu.fetchall()[0]
    return menu[5],menu[4],menu[0],menu[1],menu[2],menu[3]
async def set_registration(call):
    user_id = call.from_user.id
    user_name = call.from_user.first_name
    username = call.from_user.username
    cursor.execute('INSERT INTO test (user_id, user_name, username) VALUES (?, ?, ?)', (user_id, user_name, username))
    conn.commit()
    for n in admin_id:
        if user_id!=n:
            text=f"New\n\nID: <code>{user_id}</code>\nNAME: <code>{user_name}</code>\nUSERNAME:   @{username}"
            text+=f"\nLINK: <a href='tg://user?id={call.from_user.id}'>LINK</a> "
            try:
                await bot.send_message(n, text=text,parse_mode="HTML")
            except:
                print(f"ERROR")
async def send_code_error(message):
    menu_ids=await TakeMenuId(message)
    keyboards = types.InlineKeyboardMarkup()
    main_text=f"‚ùåERROR‚ùå\n/start"
    try:
        await bot.send_message(chat_id=menu_ids[0], text=main_text,reply_markup=keyboards,parse_mode="HTML")
    except:
        print(f"ERROR")
async def coin_info_req(coin):
    url=f"https://data.messari.io/api/v1/assets/{coin}/metrics"
    req=requests.get(url)
    res=req.json()
    market_data=res["data"]["market_data"]
    ohlcv_last_1_hour=market_data["ohlcv_last_1_hour"]
    ohlcv_last_24_hour=market_data["ohlcv_last_24_hour"]
    tz=timezone('Europe/Moscow')
    now = datetime.now(tz).strftime('%Y-%m-%d %H:%M')
    text=f"ü™ô <b>{coin.upper()}</b>\n"
    text+=f"Time: {now}\n"
    text+=f"\nprice_usd: {round(market_data['price_usd'],3)} $"
    text+=f"\npercent_change_usd_last_1_hour: {round(market_data['percent_change_usd_last_1_hour'],5)} %"
    text+=f"\npercent_change_usd_last_24_hours: {round(market_data['percent_change_usd_last_24_hours'],5)} %"
    text+=f"\n\nLast 1 hour info:"
    text+=f"\n  open: {round(ohlcv_last_1_hour['open'],3)} $"
    text+=f"\n  high: {round(ohlcv_last_1_hour['high'],3)} $"
    text+=f"\n  low: {round(ohlcv_last_1_hour['low'],3)} $"
    text+=f"\n  close: {round(ohlcv_last_1_hour['close'],3)} $"
    #text+=f"\n  volume: {round(ohlcv_last_1_hour['volume'],3)} $"
    text+=f"\n\nLast 24 hours info:"
    text+=f"\n  open: {round(ohlcv_last_24_hour['open'],3)} $"
    text+=f"\n  high: {round(ohlcv_last_24_hour['high'],3)} $"
    text+=f"\n  low: {round(ohlcv_last_24_hour['low'],3)} $"
    text+=f"\n  close: {round(ohlcv_last_24_hour['close'],3)} $"
    #text+=f"\n  volume: {round(ohlcv_last_24_hour['volume'],3)} $"
    return(text,market_data)
async def coin_info(call):
    menu_ids=await TakeMenuId(call)
    keyboard = types.InlineKeyboardMarkup()
    coin=call.data.replace('coin_', '')
    text ,market_data=await coin_info_req(coin)
    button_refresh=types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'coin_{coin}')
    keyboard.add(button_refresh)
    button_coins_back = types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data=f'coins')
    keyboard.add(button_coins_back)
    try:
        await bot.edit_message_text(chat_id=menu_ids[0], message_id=menu_ids[1],reply_markup=keyboard, text=text, parse_mode="HTML")
    except:
        print(f"ERROR")
async def check_profile(call):
    cursor.execute("SELECT user_id FROM test WHERE user_id='" + str(call.from_user.id) + "'")
    res = cursor.fetchone()
    if not res:
        await start_main_menu(call)
        return False
    return True
async def coins(call):
    menu_ids=await TakeMenuId(call)
    coins=["btc","eth","usdt","bnb","ltc","doge","trx","dai","xmr","xtz"]
    text=f"{await get_name(call.from_user.first_name,call.from_user.last_name)}, –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏ –±–æ—Ç –¥–∞—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    keyboard = types.InlineKeyboardMarkup()
    for n in coins:
        button_text=n.upper()
        button = types.InlineKeyboardButton(text=button_text, callback_data=f'coin_{n}')
        keyboard.add(button)
    keyboard.add(button_back_to_main_menu2)     
    try:
        await bot.edit_message_text(chat_id=menu_ids[0], message_id=menu_ids[1],reply_markup=keyboard, text=text)
    except:
        print(f"ERROR")
async def watch(call):
    menu_ids=await TakeMenuId(call)
    coins=["btc","eth","usdt","bnb","ltc","doge","trx","dai","xmr","xtz"]
    text=f"–ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å –Ω–∞ 1%"
    keyboard = types.InlineKeyboardMarkup()
    for n in coins:
        try:
            lock.acquire(True)
            cursor_prc.execute(f"SELECT author_id FROM  process WHERE author_id='{call.from_user.id}' AND coin='{n}'")
            res = cursor_prc.fetchone()
        finally:
            lock.release()  
        if not res:
            button_text=n.upper()
            button = types.InlineKeyboardButton(text=button_text, callback_data=f'watch_{n}')
            keyboard.add(button)
    keyboard.add(button_back_to_main_menu2)     
    try:
        await bot.edit_message_text(chat_id=menu_ids[0], message_id=menu_ids[1],reply_markup=keyboard, text=text)
    except:
        print(f"ERROR")
async def watch_set(call):
    coin=call.data.replace('watch_', '')
    try:
        lock.acquire(True)
        cursor_prc.execute(f"SELECT author_id FROM  process WHERE author_id='{call.from_user.id}' AND coin='{coin}'")
        res = cursor_prc.fetchone()
    finally:
        lock.release()  
    if not res:
        user_id = call.from_user.id
        cursor_prc.execute('INSERT INTO process (author_id, coin) VALUES (?, ?)', (user_id, coin))
        conn_prc.commit()
async def watch_start(call):
    menu_ids=await TakeMenuId(call)
    coin=call.data.replace('watch_', '')
    while True:
        await asyncio.sleep(10)
        try:
            lock.acquire(True)
            cursor_prc.execute(f"SELECT author_id FROM  process WHERE author_id='{call.from_user.id}' AND coin='{coin}'")
            res = cursor_prc.fetchone()
        finally:
            lock.release()  
        if res:
            text ,market_data=await coin_info_req(coin)
            if(abs(round(market_data['percent_change_usd_last_1_hour'],5))>1):
                keyboard = types.InlineKeyboardMarkup()
                button_stop = types.InlineKeyboardButton(text="STOP", callback_data=f'stop_{coin}')
                keyboard.add(button_stop)
                try:
                    await bot.send_message(chat_id=menu_ids[0], text=text,reply_markup=keyboard,parse_mode="HTML")
                except:
                    print(f"ERROR")
            else:
                print(f"{coin} {round(market_data['percent_change_usd_last_1_hour'],5)} %")
        else:
            print(f"IT WAS STOPPED EARLIER {coin}")
            break
async def stop(call):
    menu_ids=await TakeMenuId(call)
    coins=["btc","eth","usdt","bnb","ltc","doge","trx","dai","xmr","xtz"]
    text=f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–∂–∫—É"
    keyboard = types.InlineKeyboardMarkup()
    for n in coins:
        try:
            lock.acquire(True)
            cursor_prc.execute(f"SELECT author_id FROM  process WHERE author_id='{call.from_user.id}' AND coin='{n}'")
            res = cursor_prc.fetchone()
        finally:
            lock.release()  
        if res:
            button_text=n.upper()
            button = types.InlineKeyboardButton(text=button_text, callback_data=f'stop_{n}')
            keyboard.add(button)
    keyboard.add(button_back_to_main_menu2)     
    try:
        await bot.edit_message_text(chat_id=menu_ids[0], message_id=menu_ids[1],reply_markup=keyboard, text=text)
    except:
        print(f"ERROR")
async def stop_coin(call):
    menu_ids=await TakeMenuId(call)
    coin=call.data.replace('stop_', '')
    try:
        cursor_prc.execute(f"DELETE FROM  process WHERE author_id='{call.from_user.id}' AND coin='{coin}'")
        conn_prc.commit()
    except:
        print("ERROR DELETE EMPTY LOTTERY")
async def get_name(first_name,last_name):
    name=""
    if(first_name!=None):
        name+=f" {first_name}"
    if(last_name!=None):
        name+=f" {last_name}"
    if(first_name==None) and (last_name==None):
        name+=" Anonymous"
    return name
async def start_main_menu(call):
    cursor.execute("SELECT user_id FROM test WHERE user_id='" + str(call.from_user.id) + "'")
    res = cursor.fetchone()
    if not res:
        await set_registration(call)
    else:
        chat_id=cursor.execute("SELECT menu_chat_id FROM test WHERE user_id='" + str(call.from_user.id) + "'").fetchone()[0]
        message_id=cursor.execute("SELECT menu_message_id FROM test WHERE user_id='" + str(call.from_user.id) + "'").fetchone()[0]
        if chat_id!=0 and message_id!=0:
            try:
                lock.acquire(True)
                cursor.execute("UPDATE test SET menu_chat_id = '0' WHERE user_id='" + str(call.from_user.id) + "'")
                cursor.execute("UPDATE test SET menu_message_id = '0' WHERE user_id='" + str(call.from_user.id) + "'")
                conn.commit()
                try:
                    await bot.delete_message(chat_id=chat_id,message_id=message_id)
                except:
                    print("ERROR CANT DELETE MSG")
            finally:
                lock.release()
    keyboard = types.InlineKeyboardMarkup()
    button_coins = types.InlineKeyboardButton(text="–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data=f'coins')
    button_watch = types.InlineKeyboardButton(text="–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å", callback_data=f'watch')
    button_stop = types.InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–∂–∫—É", callback_data=f'stop')
    button_info = types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", callback_data=f'info')
    text=f"–ü—Ä–∏–≤–µ—Ç,{await get_name(call.from_user.first_name,call.from_user.last_name)}"
    text+="\n\n–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã - @bubba1983"
    keyboard.add(button_coins)
    keyboard.add(button_watch)
    keyboard.add(button_stop)
    keyboard.add(button_info)
    try:
        main_message=await bot.send_message(call.from_user.id, text=text, reply_markup=keyboard, parse_mode="HTML")
        cursor.execute("UPDATE test SET menu_chat_id = '"+str(main_message.chat.id)+"' WHERE user_id='" + str(call.from_user.id) + "'")
        cursor.execute("UPDATE test SET menu_message_id = '"+str(main_message.message_id)+"' WHERE user_id='" + str(call.from_user.id) + "'")
        conn.commit()
    except:
        print(f"ERROR BOY WENT OUT {call.from_user.id}")
async def info(call):
    menu_ids=await TakeMenuId(call)
    text=f"–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
    text+=f"\n1)–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞ ETHUSDT, –∏—Å–∫–ª—é—á–∏–≤ –∏–∑ –Ω–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –≤–ª–∏—è–Ω–∏–µ–º —Ü–µ–Ω—ã BTCUSDT\n"
    text+=f"\n–Ø –Ω–µ —Å–∏–ª—å–Ω–æ —Å–≤–µ–¥—É—â –≤ –ø–æ–¥–æ–±–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö ,–Ω–æ –≤–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ,–∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å"
    text+=f"\n\n1. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –ú–æ–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Ü–µ–Ω–∞–º–∏ ETHUSDT –∏ BTCUSDT –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö –∏ –≤—ã–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã, –∫–æ–≥–¥–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –±—ã–ª–∞ –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–π. –í —ç—Ç–∏ –ø–µ—Ä–∏–æ–¥—ã –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, —á—Ç–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã ETHUSDT –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏, –æ—Ç–ª–∏—á–Ω—ã–º–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã BTCUSDT."
    text+=f"\n\n2. –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –ú–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª—å—à–µ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É ETHUSDT (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Ç.–¥.) –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ —ç—Ç–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ —Ü–µ–Ω—É. –ü—Ä–∏ —ç—Ç–æ–º –º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –º–æ–¥–µ–ª–∏ —Ñ–∞–∫—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã BTCUSDT."
    text+=f"\n\n3. –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –ú–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±—É–¥–µ—Ç —Ü–µ–Ω–∞ ETHUSDT, –∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ - —Ñ–∞–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É. –ü—Ä–∏ —ç—Ç–æ–º –º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –º–æ–¥–µ–ª–∏ —Ñ–∞–∫—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã BTCUSDT."
    text+=f"\n\n–ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –±—É–¥–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    text+=f"\n\n2)–î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å API –æ–¥–Ω–æ–π –∫—Ä—É–ø–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ—à–∏–ª —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –≤–∏–¥–µ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞. –î–æ–±–∞–≤–∏–ª –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ú–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é. –ü–æ –∑–∞–¥–∞–Ω–∏—é, –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–ª–µ–±–∞–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –æ—Ç 1% –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å–Ω–∏–∑–∏–ª –¥–æ 10 —Å–µ–∫—É–Ω–¥. –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."
    text+="\n\n–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã - @bubba1983"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(button_back_to_main_menu2)     
    try:
        await bot.edit_message_text(chat_id=menu_ids[0], message_id=menu_ids[1],reply_markup=keyboard, text=text)
    except:
        print(f"ERROR")
@dp.message_handler(commands=['start','menu'])
async def process_start_command(message: types.Message,state: FSMContext):
    await state.finish()
    await start_main_menu(message)
    try:
        await bot.delete_message(chat_id=message.chat.id,message_id=message.message_id)
    except:
        print(f"ERROR delete_message")
@dp.message_handler(commands=['help','info'])
async def process_help_command(message: types.Message,state: FSMContext):
    await state.finish()
    try:
        await bot.send_message(message.from_user.id,text="/menu –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    except:
        print(f"ERROR")
    try:
        await bot.delete_message(chat_id=message.chat.id,message_id=message.message_id)
    except:
        print(f"ERROR delete_message")

@dp.callback_query_handler()
async def send_random_value(call: types.CallbackQuery,state: FSMContext):
    await state.finish()
    if await check_profile(call):
        if call.data == "back_menu":
            await start_main_menu(call)
        elif call.data == "test":
            await start_main_menu(call)
        elif call.data == "info":
            await info(call)
        elif "coin_" in call.data:
            await coin_info(call)
        elif call.data == "coins":
            await coins(call)
        elif call.data == "watch":
            await watch(call)
        elif "watch_" in call.data:
            await start_main_menu(call)
            await watch_set(call)
            await watch_start(call)
        elif call.data == "stop":
            await stop(call)
        elif "stop_" in call.data:
            await stop_coin(call)
            await start_main_menu(call)

@dp.callback_query_handler(state=Form.name)
async def send_random_value(call: types.CallbackQuery,state: FSMContext):
    await state.finish()
    if call.data == "back_menu":
        await start_main_menu(call)

async def reset_limits():
    print("TIME")
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.finish()
    try:
        await bot.delete_message(chat_id=message.chat.id,message_id=message.message_id)
    except:
        print(f"ERROR delete_message") 
def repeat(coro, loop):
    asyncio.ensure_future(coro(), loop=loop)
    loop.call_later(TEST_TIME, repeat, coro, loop)
@dp.message_handler(content_types='text')
async def title_h(message: types.Message):
    user_id=message.from_user.id
    msg=f"üì®TEST\nID: {message.from_user.id}\nName: {message.from_user.first_name} {message.from_user.last_name} \nUSERNAME: @{message.from_user.username}\nUSER MESSAGE:\n<b>{message.text}</b>"
    msg+=f"\nLINK: <a href='tg://user?id={message.from_user.id}'>LINK</a> "
    for n in admin_id:
        if user_id!=n:
            try:
                await bot.send_message(n, text=msg,parse_mode="HTML")
            except:
                print(f"ERROR")
    if(not message.text.isdigit()):
        await bot.send_message(message.from_user.id, text=f"–î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É\n@bubba1983",parse_mode="HTML")
    try:
        await bot.delete_message(chat_id=message.chat.id,message_id=message.message_id)
    except:
        print(f"ERROR delete_message")  
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.call_later(TEST_TIME, repeat, reset_limits, loop)
    executor.start_polling(dispatcher=dp, timeout=2, relax=0, fast=True,loop=loop)
